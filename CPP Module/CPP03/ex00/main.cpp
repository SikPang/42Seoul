/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kwsong <kwsong@student.42seoul.kr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/02/15 21:01:10 by kwsong            #+#    #+#             */
/*   Updated: 2023/02/15 21:43:56 by kwsong           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
먼저, 수업을 시행해야 합니다! 정말 독창적이군요!
ClapTrap이라고 하며 다음과 같은 개인 속성이 괄호 안에 
지정된 값으로 초기화됩니다:
• 생성자에게 매개 변수로 전달되는 이름
• 적중점(10), ClapTrap의 상태를 나타냅니다
• 에너지 포인트(10)
• 공격 데미지(0)

다음 공개 멤버 기능을 추가하여 ClapTrap이 보다 현실적으로 보이도록 합니다:
• void 공격(constd::string & target);
• void take Damage(미서명 금액);
• void be Repaired(미서명 금액);

ClapTrack 공격 시 대상에게 <공격 데미지> 명중점이 손실됩니다.
ClapTrap은 스스로 복구하면 <금액> 적중점을 되찾는다. 
공격과 수리는 각각 1 에너지 포인트가 든다.
물론, 클랩트랩은 히트 포인트나 에너지 포인트가 남지 않으면 아무것도 할 수 없다.

이러한 모든 구성원 기능에서, 무슨 일이 일어나는지 설명하기 위해 메시지를 인쇄해야 합니다.
예를 들어, attack() 함수는 다음과 같은 것을 표시할 수 있다:
ClapTrap <이름>이 <대상>을 공격하여 <피해 지점>을 발생시킵니다!
생성자와 소멸자도 메시지를 표시해야 피어 평가자가 호출되었음을 쉽게 확인할 수 있습니다.
코드가 예상대로 작동하는지 확인하기 위해 자체 테스트를 구현하고 제출합니다.
*/

#include "ClapTrap.hpp"

int main()
{
	ClapTrap ctA("A");
	ClapTrap ctB("B");

	ctA.attack("B");
	ctB.takeDamage(ctA.getAttackDamage());
	ctB.beRepaired(1);
}